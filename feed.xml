<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://wuaifx.ga/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wuaifx.ga/" rel="alternate" type="text/html" /><updated>2021-01-14T18:28:46+08:00</updated><id>https://wuaifx.ga/feed.xml</id><title type="html">吾爱分享</title><subtitle>吾爱分享的个人博客，公众号：吾爱分享</subtitle><author><name>Wu Ai Fen Xiang</name></author><entry><title type="html">如何将PyQt（pyqt-tools）中的Qt Designer改为中文界面（汉化）</title><link href="https://wuaifx.ga/2021/01/14/Python-qtcn-zh/" rel="alternate" type="text/html" title="如何将PyQt（pyqt-tools）中的Qt Designer改为中文界面（汉化）" /><published>2021-01-14T00:00:00+08:00</published><updated>2021-01-14T00:00:00+08:00</updated><id>https://wuaifx.ga/2021/01/14/Python-qtcn-zh</id><content type="html" xml:base="https://wuaifx.ga/2021/01/14/Python-qtcn-zh/">&lt;p&gt;##如何将PyQt（pyqt-tools）中的Qt Designer改为中文界面（汉化）&lt;/p&gt;

&lt;p&gt;首先直接用pip安装的PyQt-tools的Designer和windows执行程序安装的Designer，是不带翻译文件的，因此我们要把Qt creator中Designer的翻译文件拷贝到Pyqt的Designer目录中。&lt;/p&gt;

&lt;p&gt;步骤1
打开Qt creator的translations文件夹。&lt;/p&gt;

&lt;p&gt;笔者的路径：F:\Qt\Qt5.11.1\Tools\QtCreator\share\qtcreator\translations&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-PyQt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;步骤2
把其中一个文件拷贝，designer_zh_CN.qm是简体中文，designer_zh_TW.qm是繁体中文，这里我们拷贝简体中文的翻译文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-PyQt0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ps：不想下载Qt但是又想要designer_zh_CN.qm这个翻译文件的，笔者提供下载地址如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;请关注本人公众号吾爱分享派回复designer汉化文件&quot;&gt;请关注本人公众号：吾爱分享派，回复：“designer汉化文件“&lt;/h3&gt;
&lt;p&gt;###
获取下载地址&lt;/p&gt;

&lt;p&gt;步骤3
将拷贝的翻译文件复制到 PyQt5 的translations文件夹中&lt;/p&gt;

&lt;p&gt;笔者的路径：F:\Python\Lib\site-packages\PyQt5\Qt\translations&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-PyQt1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;步骤4
将拷贝的翻译文件复制到 pyqt5-tools 的translations文件夹中&lt;/p&gt;

&lt;p&gt;笔者的路径：F:\Python\Lib\site-packages\pyqt5-tools\translations&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-PyQt2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最终结果
此时打开PyQt5的designer就会发现界面变成中文的了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-PyQt3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Wu Ai Fen Xiang</name></author><category term="Python" /><summary type="html">##如何将PyQt（pyqt-tools）中的Qt Designer改为中文界面（汉化）</summary></entry><entry><title type="html">利用Python3开发一款小工具（界面的设计）</title><link href="https://wuaifx.ga/2021/01/13/PublicSsoftware-project/" rel="alternate" type="text/html" title="利用Python3开发一款小工具（界面的设计）" /><published>2021-01-13T00:00:00+08:00</published><updated>2021-01-13T00:00:00+08:00</updated><id>https://wuaifx.ga/2021/01/13/PublicSsoftware-project</id><content type="html" xml:base="https://wuaifx.ga/2021/01/13/PublicSsoftware-project/">&lt;p&gt;##简单的小例子```&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os
import sys
import paramiko
from PyQt5 import QtCore, QtGui, QtWidgets

if __name__ == '__main__':
app = QtWidgets.QApplication(sys.argv)
MyUI = QtWidgets.QWidget()
MyUI.setWindowsTitle('demo')
MyUI.resize(250, 150)
MyUI.show()
sys.exit(app.exec_())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/PuSoftP.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面的图就是运行之后的小窗口，下面对代码进行分块介绍：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/python3
# -*- coding: utf-8 -*-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一行的含义是指定python3执行，第二行指定编码方式utf-8&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os
import sys
import paramiko
from PyQt5 import QtCore, QtGui, QtWidgets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里是导入基本的必要模块，因为需要做界面，因此我我们将PyQt模块导入。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app = QtWidgets.QApplication(sys.argv)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所有的PyQt5应用必须创建一个应用（Application）对象。sys.argv参数是一个来自命令行的参数列表。Python脚本可以在shell中运行。这是我们用来控制我们应用启动的一种方法。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MyUI = QtWidgets.QWidget()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Qwidget组件是PyQt5中所有用户界面类的基础类。这里给QWidget提供了默认的构造方法。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MyUI.setWindowsTitle('demo')
MyUI.resize(250, 150)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;resize()方法调整了widget组件的大小。它现在是250px宽，150px高。
setWindowsTitle(‘demo’)设置了我们窗口的标题，这个标题显示在标题栏中。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MyUI.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;show()方法在屏幕上显示出widget。一个widget对象在这里第一次被在内存中创建，并且之后在屏幕上显示。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sys.exit(app.exec_())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后，应用进入主循环。在这个地方，事件处理开始执行。主循环用于接收来自窗口触发的事件，并且转发他们到widget应用上处理。如果我们调用exit()方法或主widget组件被销毁，主循环将退出。sys.exit()方法确保一个不留垃圾的退出。系统环境将会被通知应用是怎样被结束的。&lt;/p&gt;

&lt;p&gt;exec_()方法有一个下划线。因为exec是Python保留关键字。因此，用exec_()来代替。&lt;/p&gt;

&lt;p&gt;##2、我们的界面&lt;/p&gt;

&lt;p&gt;很多时候界面非常的复杂，我们单纯的使用代码生成，费时费力，那有没有一个简单直观的方式构造一个界面呢？
当然是有的，还记得开发环境搭建那一章节吧，我们在pycharm里添加了一个扩展工具qt designer。我们在这里就要用到qt designer来设计我们的界面。&lt;/p&gt;

&lt;p&gt;##2.1、界面规划&lt;/p&gt;

&lt;p&gt;1&amp;gt;用户设置部分&lt;/p&gt;

&lt;p&gt;涉及到windows代码上传到Linux中，必然包含了Linux服务器地址、用户名、密码、远程目录名、本地工程路径等。这里都放在用户设置部分。&lt;/p&gt;

&lt;p&gt;2&amp;gt;命令勾选部分&lt;/p&gt;

&lt;p&gt;因为小工具上传完代码后，需要根据我们勾选的命令，执行不同版本的编译。而且不同的编译命令，需要在不同的服务器上执行，这也是后续代码处理中折磨我好久的东西。&lt;/p&gt;

&lt;p&gt;3&amp;gt;运行日志查看部分&lt;/p&gt;

&lt;p&gt;运行中肯定是要日志的吗，不论你看或者不看，它都在那里，不增不减。而且万一出错了，这里也要能够打印出trace日志，不然没有日志让我定位，臣妾做不到啊。&lt;/p&gt;

&lt;p&gt;##2.2、界面设计&lt;/p&gt;

&lt;p&gt;设计步骤：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;pycharm-tools-extension tools- qt designer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/PuSoftP0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;到此就可以在designer里面设计页面&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/PuSoftP1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Wu Ai Fen Xiang</name></author><category term="Python" /><summary type="html">##简单的小例子```</summary></entry><entry><title type="html">python安装</title><link href="https://wuaifx.ga/2021/01/13/Python-install/" rel="alternate" type="text/html" title="python安装" /><published>2021-01-13T00:00:00+08:00</published><updated>2021-01-13T00:00:00+08:00</updated><id>https://wuaifx.ga/2021/01/13/Python-install</id><content type="html" xml:base="https://wuaifx.ga/2021/01/13/Python-install/">&lt;p&gt;##python环境的搭建
1.下载python（这里以python3.8.6为例）&lt;/p&gt;

&lt;p&gt;step 1：打开下载网址：https://www.python.org/downloads/windows/&lt;/p&gt;

&lt;p&gt;step 2：我这里选着python3的版本&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;step 3：选择python的可执行文件安装包&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.安装python（这里以python3.8.6为例）&lt;/p&gt;

&lt;p&gt;step 1：下载完成后就可以安装了，基本傻瓜式安装，不过要强调几点，如下图（python3.8.6已经可以自动添加环境变量                     如果你要安装python2那么你手动配置环境变量，具体方法自行百度，这里不做赘述！）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;step 2：安装完成后，我们来检查一下python是否安装成功，打开cmd命令，输入python，回车，若显示类似下图，证明环境搭建完成。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;step 3：测试输出hello world，从开始菜单打开python自带的IDE,输入如下代码，然后回车。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;       print('hello world')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，我们的python环境搭建完成。&lt;/p&gt;</content><author><name>Wu Ai Fen Xiang</name></author><category term="Python" /><summary type="html">##python环境的搭建 1.下载python（这里以python3.8.6为例）</summary></entry><entry><title type="html">pycharm的python解释器的搭建和创建第一个项目</title><link href="https://wuaifx.ga/2021/01/13/Python-pycharm-config/" rel="alternate" type="text/html" title="pycharm的python解释器的搭建和创建第一个项目" /><published>2021-01-13T00:00:00+08:00</published><updated>2021-01-13T00:00:00+08:00</updated><id>https://wuaifx.ga/2021/01/13/Python-pycharm-config</id><content type="html" xml:base="https://wuaifx.ga/2021/01/13/Python-pycharm-config/">&lt;p&gt;##pycharm的python解释器的搭建和创建第一个项目&lt;/p&gt;

&lt;p&gt;step 1：打开pycharm并且点击设置，如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;step 2：由于之前我配置过，也创建过项目；所以系统把之前的默认帮我添加上了；只是现在不支持3.5了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;step 3：然后，点击python解释器框体后面的齿轮按钮，再点击添加，如下配置，点击确定&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;step 4：下载一些文件，稍等片刻；如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;step 5：完成后，如下图，点确定&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;step 6：至此安装完成&lt;/p&gt;

&lt;p&gt;##pycharm的建立一个新项目&lt;/p&gt;

&lt;p&gt;首先打开pycharm，接下来是一些按照顺序摆放的配置图片。完成pycharm的一个项目创建。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm-project.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm-project0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm-project1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm-project2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm-project3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm-project4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/python-pycharm-project5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，pycharm已经全部安装完成。&lt;/p&gt;</content><author><name>Wu Ai Fen Xiang</name></author><category term="Python" /><summary type="html">##pycharm的python解释器的搭建和创建第一个项目</summary></entry><entry><title type="html">PyCharm如何使用Qt Designer</title><link href="https://wuaifx.ga/2021/01/13/pycharm-qt-designer/" rel="alternate" type="text/html" title="PyCharm如何使用Qt Designer" /><published>2021-01-13T00:00:00+08:00</published><updated>2021-01-13T00:00:00+08:00</updated><id>https://wuaifx.ga/2021/01/13/pycharm-qt-designer</id><content type="html" xml:base="https://wuaifx.ga/2021/01/13/pycharm-qt-designer/">&lt;p&gt;Qt Designer 是一个 GUI 设计器，能可视化设计出界面。PyQT5 通过 pyuic5 工具将 Qt Designer 生成的 xxx.ui 文件转换成 python 代码，大大节省手工编写界面代码的工作量。&lt;/p&gt;

&lt;p&gt;本篇介绍如何在 PyCharm 中集成 Qt Designer 工具，包括 QT Designer 的配置， pyuic5 的配置和调用界面代码的方法。&lt;/p&gt;

&lt;p&gt;pyqt5 可以使用 pip 工具来安装：```&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install pyqt5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装了 pyqt5 之后，在 python 安装目录下面的 Scripts 文件夹中，有一个 pyuic5.exe 文件，这个可执行文件用于将 Qt Designer 生成的 ui 文件转换为 python 代码。&lt;/p&gt;

&lt;p&gt;##安装 Qt Designer
在 https://build-system.fman.io/qt-designer-download 这个网址可以下载和安装独立的 Qt Designer 安装版，根据操作系统选择合适的安装文件进行安装。&lt;/p&gt;

&lt;p&gt;##在 PyCharm 中配置 Qt Designer
Qt Designer 安装后，在安装目录下面有一个 designer.exe 文件。打开该程序，以拖拽的方式设计界面元素。设计完成后保存为 xxx.ui 文件。ui 文件为 xml 格式，用于描述窗体和控件的属性。&lt;/p&gt;

&lt;p&gt;在 PyCharm 中配置 Qt Designer，目的是在开发的时候，在 PyCharm 中直接操作 Qt Designer，同时能方便的将 ui 文件保存到 Python 工程指定的文件夹下。通过菜单 File -&amp;gt; Settings 打开如下的配置界面，点击右键 “+” 号配置 Qt Designer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharmqtd.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharmqtd0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;左边是配置的路径，右面是配置的参数：
Program： designer.exe 的路径
Working Directory: 设置保存的 UI 文件位置，$FileDir$ 表示文件所在目录。&lt;/p&gt;

&lt;p&gt;这个配置适合调用 Qt Designer 新建窗口的情况。如果要对已经创建的 ui 文件进行编辑，为了方便，可以再新建一个配置如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharmqtd1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;测试一下。比如在 Python 工程中新建一个 designer 文件夹，选中 designer 文件夹&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharmqtd2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过菜单 Tools -&amp;gt; External Tools 菜单打开 qt designer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharmqtd3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意这里的 QT Designer Create 和 QT Designer Edit 都是我刚才配置的外部工具。在 Qt Designer 中新建一个 Main Window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharmqtd4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Main Window 中拖拽几个控件。因为本文主要讲解 Qt Designer 的用法，所以对控件的细节不展开。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharmqtd5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后将界面保存为 MainWindow.ui，路径为 designer 文件夹下面。选中 MainWindow.ui，通过菜单 Tools -&amp;gt; External Tools -&amp;gt; QT Desinger Edit，MainWindow.ui 文件被 Qt Designer 打开。Qt Designer 的配置没有问题。&lt;/p&gt;

&lt;p&gt;##如何调用界面代码
ui 转换的 python 代码随着对 ui 的变更，每次都会重新生成，所以不要在 MainWIndow.py 中编写代码。我们需要另外新建一个 python 文件，并在其中编写代码来调用界面代码。&lt;/p&gt;

&lt;p&gt;我们看到，qt designer 自动生成的代码实现了一个名为 UI_MainWindow 的类，这个类继承自 object，在该类的 setupUi() 方法中有一个名为 MainWindow 的参数，我们需要将真正的 QMainWindow 对象传给这个方法，来实现我们自己的主窗口。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from designer.MainWindow import Ui_MainWindow
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow

if __name__ == '__main__':
# application 对象
app = QApplication(sys.argv)

# QMainWindow对象
mainwindow = QMainWindow()

# 这是qt designer实现的Ui_MainWindow类
ui_components = Ui_MainWindow()
# 调用setupUi()方法，注册到QMainWindwo对象
ui_components.setupUi(mainwindow)

# 显示
mainwindow.show()

sys.exit(app.exec_())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Wu Ai Fen Xiang</name></author><category term="Python" /><summary type="html">Qt Designer 是一个 GUI 设计器，能可视化设计出界面。PyQT5 通过 pyuic5 工具将 Qt Designer 生成的 xxx.ui 文件转换成 python 代码，大大节省手工编写界面代码的工作量。</summary></entry><entry><title type="html">Pycharm2020.3.2 安装教程2020最新版！（内附Pycharm永久激活码）</title><link href="https://wuaifx.ga/2021/01/12/PyCharm-Installation-activation-Steps/" rel="alternate" type="text/html" title="Pycharm2020.3.2 安装教程2020最新版！（内附Pycharm永久激活码）" /><published>2021-01-12T00:00:00+08:00</published><updated>2021-01-12T00:00:00+08:00</updated><id>https://wuaifx.ga/2021/01/12/PyCharm-Installation-activation-Steps</id><content type="html" xml:base="https://wuaifx.ga/2021/01/12/PyCharm-Installation-activation-Steps/">&lt;h3 id=&quot;关注博主微信公众号吾爱分享派然后回复激活码即可获取202032版本最新pycharm激活码&quot;&gt;关注博主微信公众号：吾爱分享派，然后回复“激活码”，即可获取2020.3.2版本最新Pycharm激活码~&lt;/h3&gt;

&lt;p&gt;PyCharm 是我用过的python编辑器中，比较顺手的一个。而且可以跨平台，在macos和windows下面都可以用，这点比较好。是python现在最好用的编辑器，没有之一。&lt;/p&gt;

&lt;p&gt;笔者使用PyCharm2020.3.2，请根据机器是64位还是32位来选择对应的PyCharm版本。（相信绝大部分人都可以很从容的来查看自己机器的位数，在这里就不赘述了，如果不清楚自己可以百度一下就可以）&lt;/p&gt;

&lt;p&gt;可以去PyCharm官网：https://www.jetbrains.com 下载对应机器的安装包。&lt;/p&gt;

&lt;p&gt;##安装包下载&lt;/p&gt;

&lt;p&gt;第一步：进入PyCharm官网，点击开发者工具，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/PyCharm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二步：点击“PyCharm”，进入安装包现在页面，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三步：点击“DOWNLOAD NOW”，根据自己需要下载匹配的操作系统的安装包，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第四步：等待安装包下载完，运行即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##python安装过程
 第一步：找到下载好的PyCharm安装包，如下图所示“&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二步：双击已下载的PyCharm安装包，出现如下图所示的界面，点击“next”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三步：选择安装目录，Pycharm需要的内存较多，建议将其安装在D盘或者E盘，不建议放在系统盘C盘：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第四步：点击Next，进入下图的界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##数字1：
create desktop shortcut（创建桌面快捷方式），系统32位就选32-bit,系统64位就选64-bit。现在大多数都是64位了，不清楚系统类型：我的电脑=》右键=》属性&lt;/p&gt;

&lt;p&gt;笔者的电脑是64位系统，所以选择64位。&lt;/p&gt;

&lt;p&gt;##数字2：
update path variable(restart needed)更新路径变量(需要重新启动)，add launchers dir to the path（将启动器目录添加到路径中）。上一个PyCharm版本没有的，所以没有选择。&lt;/p&gt;

&lt;p&gt;##数字3：
update context menu（更新上下文菜单），add open folder as project（添加打开文件夹作为项目）。上一个PyCharm版本没有的，所以没有选择。&lt;/p&gt;

&lt;p&gt;##数字4：
create associations 创建关联，关联.py文件，双击都是以pycharm打开。&lt;/p&gt;

&lt;p&gt;##数字5：
不要选，我第一次安装的时候就是勾选了，差点放弃。pycharn是国外的软件，网站就是国外，下载速度很慢。有人选上等一两个小时，我等半小时，直接强制关掉。没勾选安装很快完成。把数字1和数字4勾选就好，数字2和数字3看你自己需求。（数字5如果有需求，自己可以单独去官网下载安装JRE）&lt;/p&gt;

&lt;p&gt;第五步：点击Next，进入下图界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;默认安装即可，直接点击Install。&lt;/p&gt;

&lt;p&gt;第六步：耐心的等待两分钟左右，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第七步：之后就会得到下面的安装完成的界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第八步：点击Finish，Pycharm安装完成。接下来对Pycharm进行配置，双击运行桌面上的Pycharm图标，进入下图界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从哪里导入pycharm设置，直接第三个（Do not import settings），以后还可以导入。选择Do not import settings，之后选择OK，进入下一步。&lt;/p&gt;

&lt;p&gt;第九步：勾选I confirm that……. ，界面如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第十步：点击“continue”，界面如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第十一步：数据分享，界面如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个相当于一个问卷调查吧，看自己愿不愿将信息发送JetBrains来提升他们产品的质量&lt;/p&gt;

&lt;p&gt;第十二步：点击“send”或者“Don’t send”。进入如下界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;皮肤选择，建议选择Darcula主题，该主题更有利于保护眼睛，而且看上去也非常不错~~~&lt;/p&gt;

&lt;p&gt;第十三步：可以右上角关掉，也可以左下角：skip remaining and set defaults（跳过其余和设置默认值）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第十四步：点击左下角：skip remaining and set defaults（跳过其余和设置默认值）进入激活界面，选择第二个License server，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Active 激活分为三种：
1、JetBrains Account 账户激活；
2、Activation code激活码（推荐亲测）；
3、License server授权服务器激活（推荐）&lt;/p&gt;

&lt;p&gt;Evaluate试用 一般是30天，不推荐&lt;/p&gt;

&lt;p&gt;国内一般都是破解激活，到此安装已完成，具体激活请看激活的随笔。&lt;/p&gt;</content><author><name>Wu Ai Fen Xiang</name></author><category term="PyCharm" /><summary type="html">关注博主微信公众号：吾爱分享派，然后回复“激活码”，即可获取2020.3.2版本最新Pycharm激活码~</summary></entry><entry><title type="html">使用PyCharm官方中文语言包汉化PyCharm</title><link href="https://wuaifx.ga/2021/01/12/PyCharm-chinese/" rel="alternate" type="text/html" title="使用PyCharm官方中文语言包汉化PyCharm" /><published>2021-01-12T00:00:00+08:00</published><updated>2021-01-12T00:00:00+08:00</updated><id>https://wuaifx.ga/2021/01/12/PyCharm-chinese</id><content type="html" xml:base="https://wuaifx.ga/2021/01/12/PyCharm-chinese/">&lt;p&gt;对于英文不行我来说使用英文版PyCharm实在是太难受了，网上好多汉化补丁都是网友提供了，下面为大家介绍一种PyCharm官方中文语言包汉化方法&lt;/p&gt;

&lt;p&gt;在PyCharm主窗口中点击菜单栏中的File菜单下的Settings…菜单进入PyCharm设置窗口，如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm-ch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mac/auto-operate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PyCharm设置窗口，如下图。点击下图标注1 Plugins选项进入PyCharm插件管理窗口，在下图标注2处输入“chinese”系统会自动搜索相关插件，找到如下图标注3处所示的chinese(simplified) language pack eap插件安装此插件（点击下图标注4处 Install按钮）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm-ch0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PyCharm中文语言插件安装完成后需要重启PyCharm，如下图所示。点击下图标注1或2处 RESTART IDE按钮重启PyCharm&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm-ch1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击上图标注1或2处 Restart IDE按钮重启PyCharm后弹出确认重启提示窗，如下图。点击下图标注1处 Restart按钮确认重启PyCharm&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm-ch2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成重启后PyCharm主窗口成功改为中文，如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm-ch3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##PyCharm汉化成功后如果我们想改回英文的该如何操作呢？&lt;/p&gt;

&lt;p&gt;依然是在PyCharm的设置窗口中的Plugins选项中如，下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/python/pycharm-ch4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击上图标注1 Plugins选项进入插件管理窗口，点击上图标注2处的 Installed选项显示所有已安装PyCharm插件，找到并选中已安装的PyCharm中文语言插件上图标注3，点击上图标注4处 Disable按钮关闭PyCharm中文语言插件，然后点击上图标注5处 确定按钮重启PyCharm，重启后PyCharm又恢复到了英文状态。&lt;/p&gt;

&lt;p&gt;再次改为中文只需按此操作打开PyCharm中文语言插件即可&lt;/p&gt;</content><author><name>Wu Ai Fen Xiang</name></author><category term="PyCharm" /><summary type="html">对于英文不行我来说使用英文版PyCharm实在是太难受了，网上好多汉化补丁都是网友提供了，下面为大家介绍一种PyCharm官方中文语言包汉化方法</summary></entry><entry><title type="html">给 Mac 添加右键菜单「使用 VSCode 打开」</title><link href="https://wuaifx.ga/2020/10/28/add-vscode-to-right-click/" rel="alternate" type="text/html" title="给 Mac 添加右键菜单「使用 VSCode 打开」" /><published>2020-10-28T00:00:00+08:00</published><updated>2020-10-28T00:00:00+08:00</updated><id>https://wuaifx.ga/2020/10/28/add-vscode-to-right-click</id><content type="html" xml:base="https://wuaifx.ga/2020/10/28/add-vscode-to-right-click/">&lt;p&gt;最终的实现效果是在文件 / 文件夹上右击时，会出现菜单项「用 VSCode 打开」，点击后会启动 Visual Studio Code 打开对应的文件 / 文件夹。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/mac/open-with-vscode.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;实现步骤&quot;&gt;实现步骤&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;打开「自动操作.app」，就是小机器人图标那个；&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/posts/mac/auto-operate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;kbd&gt;command + n&lt;/kbd&gt; 新建文稿，在「选取文稿类型」里选择「快速操作」；&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/posts/mac/quick-operate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;按以下步骤操作：&lt;/p&gt;

    &lt;p&gt;第五步贴入代码&lt;/p&gt;

    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;f &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;do
     &lt;/span&gt;open &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Visual Studio Code&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;/images/posts/mac/open-with-vscode-steps.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;以上代码片段的大概意思是对于传入的一个或多个参数，都使用 Visual Studio Code 这个 APP 打开（将以下步骤配置完成后，可以分别选中一个、多个文件 / 文件夹，然后右键用 VSCode 打开看看效果）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;kbd&gt;command + s&lt;/kbd&gt; 保存为 「用 VSCode 打开」：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/posts/mac/open-with-vscode-rename.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;好了，现在试试在 Finder 里右键一个文件，就可以直接看到「用 VSCode 打开」菜单，右键一个文件夹，就可以看到「服务」-「用 VSCode 打开」菜单了。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/posts/mac/open-with-vscode-file.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;愉快地使用 Visual Studio Code 和各种文件、文件夹玩耍吧。&lt;/p&gt;

&lt;h2 id=&quot;编辑&quot;&gt;编辑&lt;/h2&gt;

&lt;p&gt;以后如果想修改上面这个快速操作，有两种方法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;可以打开「自动操作.app」，然后「文件」-「打开最近使用」 -「用 VSCode 打开.workflow」；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果找不到这个操作，可以「文件」-「打开」-个人目录 / 资源库 / Services / 用 VSCode 打开.workflow&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/posts/mac/open-with-vscode-open.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;如果个人目录下不显示「资源库」，按 &lt;kbd&gt;Command + Shift + .&lt;/kbd&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/u013069892/article/details/83147239&quot;&gt;https://blog.csdn.net/u013069892/article/details/83147239&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wu Ai Fen Xiang</name></author><category term="VSCode" /><summary type="html">最终的实现效果是在文件 / 文件夹上右击时，会出现菜单项「用 VSCode 打开」，点击后会启动 Visual Studio Code 打开对应的文件 / 文件夹。</summary></entry><entry><title type="html">使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源（二）</title><link href="https://wuaifx.ga/2020/10/07/cdn-for-github-pages-2/" rel="alternate" type="text/html" title="使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源（二）" /><published>2020-10-07T00:00:00+08:00</published><updated>2020-10-07T00:00:00+08:00</updated><id>https://wuaifx.ga/2020/10/07/cdn-for-github-pages-2</id><content type="html" xml:base="https://wuaifx.ga/2020/10/07/cdn-for-github-pages-2/">&lt;p&gt;之前写过一篇 &lt;a href=&quot;https://wuaifx.ga/2020/05/01/cdn-for-github-pages/&quot;&gt;使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源&lt;/a&gt;，在那之后，又陆续想到并实施了几点利用 jsDelivr 进一步加速静态资源加载的措施，新起一篇作为记录和分享。&lt;/p&gt;

&lt;p&gt;继上一轮改造过后，比较拖页面加载速度的主要有三点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;页面首个请求响应时间；&lt;/li&gt;
  &lt;li&gt;图片资源加载时间；&lt;/li&gt;
  &lt;li&gt;站内搜索引用的 JSON 资源加载时间。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第 1 点在页面仍然托管在 GitHub Pages 的前提下，似乎没有什么好办法能产生质的飞跃；本篇主要改善了第 2 点和第 3 点。&lt;/p&gt;

&lt;h2 id=&quot;0x01-图片资源加速&quot;&gt;0x01 图片资源加速&lt;/h2&gt;

&lt;p&gt;这里所说的图片主要是指文章里引用的图片。&lt;/p&gt;

&lt;p&gt;我一直将图片放在博客源码根目录的 images 文件夹下，引用图片的习惯写法是这样的：&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;after use cdn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/images/posts/github/cdn-after.png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果想将这个图片地址替换为 jsDelivr 的地址，需要做的就是将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/images&lt;/code&gt; 替换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://cdn.jsdelivr.net/gh/wuaifx/wuaifx.github.io@master/images&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;一处一处替换行不行？当然也行，但后面写新文章时要引用图片，还得手动写这一长串，不方便；万一 jsDeliver 出状况，也不好一键切换回来。有没有一劳永逸的方法？当然也有，我们从 Jekyll 的 layout 机制来想办法。&lt;/p&gt;

&lt;p&gt;Jekyll 的 layout 可以理解为页面模板，它是可以继承的，比如我的博客的所有页面模板有一个共同的祖先模板 _layouts/default.html，模板里可以使用 &lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;Liquid&lt;/a&gt; 语法对内容进行处理，我们可以利用这一点，来自动完成批量替换的工作。&lt;/p&gt;

&lt;p&gt;关键代码如下：&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;assets_base_url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cdn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jsdelivr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;assets_base_url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cdn.jsdelivr.net/gh/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@master'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;assets_images_url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src=&quot;'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;assets_base_url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/images&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;header.html&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src=&quot;/images'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;assets_images_url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;footer.html&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大意就是，如果打开了启用 jsDelivr 加速的开关，就将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt; 里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src=&quot;/images&quot;&lt;/code&gt; 替换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src=&quot;https://cdn.jsdelivr.net/gh/wuaifx/wuaifx.github.io@master/images&quot;&lt;/code&gt;，否则替换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src=&quot;https://wuaifx.ga/images&quot;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;以上便达成了我们的目的。&lt;/p&gt;

&lt;h2 id=&quot;0x02-站内搜索引用的-json-资源加速&quot;&gt;0x02 站内搜索引用的 JSON 资源加速&lt;/h2&gt;

&lt;p&gt;我是使用 &lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search&quot;&gt;Simple-Jekyll-Search&lt;/a&gt; 这个 JavaScript 库来实现站内搜索的，它的搜索数据是来自一个动态生成的 JSON 文件。&lt;/p&gt;

&lt;p&gt;这个 JSON 文件编译前长这样：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wuaifx/wuaifx.github.io/blob/master/assets/search_data.json&quot;&gt;https://github.com/wuaifx/wuaifx.github.io/blob/master/assets/search_data.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jekyll 编译后长这样：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wuaifx.ga/assets/search_data.json&quot;&gt;https://wuaifx.ga/assets/search_data.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这样的资源是没有办法直接通过替换网址来用 jsDelivr 加速的，因为 jsDelivr 上缓存的是编译前的文件，而我们需要的是编译后的。&lt;/p&gt;

&lt;p&gt;那我们就想办法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将博客源码编译；&lt;/li&gt;
  &lt;li&gt;将编译结果保存到另一个分支；&lt;/li&gt;
  &lt;li&gt;通过 jsDelivr 引用新分支上的这个文件。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这些步骤可以通过 GitHub 去年推出的新特性 &lt;a href=&quot;https://github.com/features/actions&quot;&gt;Actions&lt;/a&gt; 来完成，在我们每一次向博客源码仓库 push 代码时自动触发。&lt;/p&gt;

&lt;p&gt;关键步骤如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在 GitHub 新建一个 Personal access Token：&lt;/p&gt;

    &lt;p&gt;Settings –&amp;gt; Developer settings –&amp;gt; Personal access tokens –&amp;gt; Generate new token –&amp;gt; 填写 note，勾选 public_repo，生成之后复制 token 值备用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在博客源码仓库的 Settings –&amp;gt; Secrets –&amp;gt; New secret，Name 填 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACCESS_TOKEN&lt;/code&gt;，Value 填第 1 步里复制的 token 值；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在博客源码根目录下新建文件 .github/workflows/ci.yml，内容如下：&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build and Deploy&lt;/span&gt;

 &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

 &lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;build-and-deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2.3.1&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
           &lt;span class=&quot;na&quot;&gt;persist-credentials&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

       &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set Ruby &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2.7&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-ruby@v1&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;ruby-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.7&lt;/span&gt;

       &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install and Build&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;gem install bundler&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;bundle exec jekyll build&lt;/span&gt;
           &lt;span class=&quot;no&quot;&gt; &lt;/span&gt;
       &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JamesIves/github-pages-deploy-action@3.6.2&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;BRANCH&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;built&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;FOLDER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_site&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;CLEAN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;大意就是在向 master 分支 push 代码时，自动执行 checkout、初始化 ruby 环境、安装 Jekyll 并编译博客源码的工作，最后将编译生成的 _site 目录里的内容推送到 built 分支。对 GitHub Actions 感兴趣的同学可以自行参考官方说明学习。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改引用 JSON 文件的地方，比如我的 _includes/sidebar-search.html 里的写法由：&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://wuaifx.ga/assets/search_data.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;改为了&lt;/p&gt;

    &lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cdn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jsdelivr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wuaifx.ga'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
   json: 'https://cdn.jsdelivr.net/gh/wuaifx/wuaifx.github.io@built/assets/search_data.json',
 &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
   json: '&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;/assets/search_data.json',
 &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将以上更改推送到源码仓库，等待处理完成即可。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;0x03-结语&quot;&gt;0x03 结语&lt;/h2&gt;

&lt;p&gt;经过以上改造，博客页面的加载速度又得到了小小的提升，所有相关源码可以在 &lt;a href=&quot;https://github.com/wuaifx/wuaifx.github.io&quot;&gt;https://github.com/wuaifx/wuaifx.github.io&lt;/a&gt; 找到，有相关心得或建议的朋友欢迎交流指正。&lt;/p&gt;

&lt;p&gt;相关文章：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wuaifx.ga/2020/05/01/cdn-for-github-pages/&quot;&gt;使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wu Ai Fen Xiang</name></author><category term="GitHub" /><summary type="html">之前写过一篇 使用 jsDelivr 免费加速 GitHub Pages 博客的静态资源，在那之后，又陆续想到并实施了几点利用 jsDelivr 进一步加速静态资源加载的措施，新起一篇作为记录和分享。</summary></entry><entry><title type="html">林丹从国家队退役，带起一波回忆</title><link href="https://wuaifx.ga/2020/07/05/lindan-and-badminton/" rel="alternate" type="text/html" title="林丹从国家队退役，带起一波回忆" /><published>2020-07-05T00:00:00+08:00</published><updated>2020-07-05T00:00:00+08:00</updated><id>https://wuaifx.ga/2020/07/05/lindan-and-badminton</id><content type="html" xml:base="https://wuaifx.ga/2020/07/05/lindan-and-badminton/">&lt;p&gt;昨天朋友圈和微博上有不少人在转发林丹从国家队退役的消息，有一点感慨的同时，我在想，以后新入坑的羽毛球迷们，可能渐渐就都不知道「超级丹」、「林李大战」，还有「四大天王」这些名词了吧。&lt;/p&gt;

&lt;p&gt;不过没有关系，一代人有一代人的关注点，新时代总会诞生新的偶像，就像去年周杰伦和蔡徐坤的粉丝在微博刷超话，这样的场景怕是没少发生过，场面有大有小罢了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/lindan-retired.png&quot; alt=&quot;lindan-retired&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这一篇不讲林丹的事，讲一些我与羽毛球之间的那些可以不说的碎碎念。&lt;/p&gt;

&lt;h2 id=&quot;入坑的过程&quot;&gt;入坑的过程&lt;/h2&gt;

&lt;p&gt;羽毛球在国内可能是仅次于乒乓球的国民运动了，小时候哥哥姐姐们就有时候会在门口的空地上打一会儿，而我开始打羽毛球比较晚，是在参加工作以后了。&lt;/p&gt;

&lt;p&gt;依照工作地点变迁的线：&lt;/p&gt;

&lt;h3 id=&quot;十堰&quot;&gt;十堰&lt;/h3&gt;

&lt;p&gt;第一家公司东风汽车有着浓厚的羽毛球氛围，据说与时任董事长热爱这项运动有关。当时一起入职的小伙伴们有些就此入坑，而我那时候，一方面主要运动还是偶尔打一打篮球，另一方面，因为以前基本没打过，去过几次总是接不到球感觉很丢脸，所以参与意愿也比较淡薄。&lt;/p&gt;

&lt;h3 id=&quot;北京&quot;&gt;北京&lt;/h3&gt;

&lt;p&gt;我的「羽毛球生涯」可以说正式开端于北漂期间，那时候跟同学们闲聊起各自公司里的业余活动，发现羽毛球很流行，推测可能是因为身体冲撞少，相比篮球足球受伤的风险更低。在蹭了同学公司的几次活动之后，萌生了一些兴趣，在入职前东家搜狗前几天，跟几个同学一起去买了球拍，打算偶尔组一局。&lt;/p&gt;

&lt;p&gt;然后在前东家发现项目组里的测试童鞋们正谋划组织羽毛球活动，于是果断报名参加。刚开始也是各种接不到球、挥拍挥空，好在这时候逐渐学会了一点自嘲，终于没有退缩，坚持了下来。在这期间刷了一阵李在福的《追球》系列教学视频，对基础技术有了系统一点的了解。再后来就是参加公司和集团俱乐部的活动，基本每周都去清华气膜馆打，从被新手虐慢慢过渡到了能虐新手，然后……水平就止步不前了。&lt;/p&gt;

&lt;p&gt;在那段时期还加了回龙观地区的民间组织情怀羽毛球俱乐部，周末偶尔到回龙观中学被虐一虐。&lt;/p&gt;

&lt;h3 id=&quot;武汉&quot;&gt;武汉&lt;/h3&gt;

&lt;p&gt;加入现东家震坤行后，我从公司羽毛球活动的参与者变成了主要组织者。武汉这边是分部，办公室人数一直不多，从开始的二十来号人到现在的一百多号人，组起一场球来依然不容易。&lt;/p&gt;

&lt;p&gt;以前周末主要是和光谷社区结识的一群小伙伴一起打球，疫情后的这段时间，又组了一个「问道软件园，养生羽毛球」的群，聚集了光谷软件园几个公司的一些有热爱的小伙伴工作日下班后继续活动。&lt;/p&gt;

&lt;h2 id=&quot;收获&quot;&gt;收获&lt;/h2&gt;

&lt;p&gt;长期坚持一项运动收益良多，说一说我体会比较深的几个方面。&lt;/p&gt;

&lt;h3 id=&quot;健康&quot;&gt;健康&lt;/h3&gt;

&lt;p&gt;从事上班时久坐不动的工作，几年之后体检，基本很少有腰椎颈椎没有毛病的。坚持打羽毛球是一种比较好的预防和缓解的方法。&lt;/p&gt;

&lt;p&gt;再就是，几天的工作里可能有比较烦闷的事情积攒下来，通过运动能及时把这口闷气排解出来，有时候感觉每周的这一场球就是生活的寄托了。&lt;/p&gt;

&lt;h3 id=&quot;社交&quot;&gt;社交&lt;/h3&gt;

&lt;p&gt;能坚持一项爱好的一般都是不错的人，在羽毛球这个圈子更是。&lt;/p&gt;

&lt;p&gt;通过参与公司、民间组织的活动，我结识了不少优秀的小伙伴，一起享受运动和生活的乐趣，必要时也能相互提供其它方面的帮助。&lt;/p&gt;

&lt;p&gt;我一直建议身边的年轻人们要有一项爱好，融入对应的圈子。特别建议坚持来打球，能认识一群不错的朋友不说，说不定人生的另一半也能在球场相遇，我们起源于光谷社区的约球小群里，19 个人成就了 3 对情侣的事一直被津津乐道，这可比各种相亲活动靠谱多了。&lt;/p&gt;

&lt;h3 id=&quot;性格与心态&quot;&gt;性格与心态&lt;/h3&gt;

&lt;p&gt;我说我是一个内向的人有很多人不信，但确实就是这样。以前是什么程度呢？上大学英语课时被老师点起来回答个问题脸能红到耳朵根，有个什么事情要找女生说，要在心里鼓好一阵的勇气。现在脸皮稍厚了一点，但内向依旧对我影响深远。&lt;/p&gt;

&lt;p&gt;这样的我有一个缺陷，那就是在擅长的方面会表现得比较自信，也比较愿意去表现，而不擅长的方面就会尽量退避。这在有些时候没有问题，但在职场上，积累得多了可能就会给人一种态度不积极的印象。&lt;/p&gt;

&lt;p&gt;学打羽毛球的过程，对我而言，也是一个磨炼心性的过程，从开始的接不到球、挥空拍时大家善意的嘲笑，到熟能生巧与一些业余球友可以一战，这中间我克服了一些怯懦，建立了一些自信——不擅长的方面，通过练习是可以入门和加强的。&lt;/p&gt;

&lt;h2 id=&quot;资源&quot;&gt;资源&lt;/h2&gt;

&lt;p&gt;最后推荐一个我觉得不错的学习资源吧，作为野路子出身系统入门挺好：&lt;/p&gt;

&lt;p&gt;李在福《追球》全集：&lt;a href=&quot;https://v.youku.com/v_show/id_XMjczOTAyODI4.html&quot;&gt;https://v.youku.com/v_show/id_XMjczOTAyODI4.html&lt;/a&gt;&lt;/p&gt;</content><author><name>Wu Ai Fen Xiang</name></author><category term="Blog" /><summary type="html">昨天朋友圈和微博上有不少人在转发林丹从国家队退役的消息，有一点感慨的同时，我在想，以后新入坑的羽毛球迷们，可能渐渐就都不知道「超级丹」、「林李大战」，还有「四大天王」这些名词了吧。</summary></entry></feed>